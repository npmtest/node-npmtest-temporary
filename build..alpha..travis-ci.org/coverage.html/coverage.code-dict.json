{"/home/travis/build/npmtest/node-npmtest-temporary/test.js":"/* istanbul instrument in package npmtest_temporary */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-temporary/lib.npmtest_temporary.js":"/* istanbul instrument in package npmtest_temporary */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_temporary = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_temporary = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-temporary/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-temporary && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_temporary */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_temporary\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_temporary.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_temporary.rollup.js'] =\n            local.assetsDict['/assets.npmtest_temporary.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_temporary.__dirname + '/lib.npmtest_temporary.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-temporary/node_modules/temporary/index.js":"/**\n * Temporary - The lord of tmp.\n * \n * Author: Veselin Todorov <hi@vesln.com>\n * Licensed under the MIT License.\n */\n\n/**\n * Dependencies.\n */\nvar package = require('package')(module);\n\n/**\n * Version.\n */\nmodule.exports.version = package.version;\n\n/**\n * Exporting the temp file\n */\nmodule.exports.File = require('./lib/file');\n\n/**\n * Exporting the temp directory.\n */\nmodule.exports.Dir = require('./lib/dir');\n","/home/travis/build/npmtest/node-npmtest-temporary/node_modules/temporary/lib/file.js":"/**\n * Temporary - The lord of tmp.\n *\n * Author: Veselin Todorov <hi@vesln.com>\n * Licensed under the MIT License.\n */\n\n/**\n * Dependencies.\n */\nvar fs = require('fs');\nvar path = require('path');\nvar generator = require('./generator');\nvar detector = require('./detector');\nvar Base = require('./base');\n\n/**\n * File constructor.\n *\n * @param {String|null} name\n */\nfunction File(name) {\n  this.init(name);\n};\n\n/**\n * File extends from tmp.\n */\nFile.prototype.__proto__ = Base.prototype;\n\n/**\n * Creates new file.\n *\n * @param {String} filename\n */\nFile.prototype.create = function(filename) {\n  return fs.writeFileSync(path.normalize(filename), '');\n};\n\n/**\n * Asynchronously reads the entire contents of a file.\n */\nFile.prototype.readFile = function() {\n  fs.readFile.apply(fs, this.prepareArgs(arguments));\n};\n\n/**\n * Synchronous read.\n */\nFile.prototype.readFileSync = function() {\n  return fs.readFileSync.apply(fs, this.prepareArgs(arguments));\n};\n\n/**\n * Asynchronously writes data to a file.\n */\nFile.prototype.writeFile = function() {\n  fs.writeFile.apply(fs, this.prepareArgs(arguments));\n};\n\n/**\n * Synchronous writes data to a file.\n */\nFile.prototype.writeFileSync = function() {\n  return fs.writeFileSync.apply(fs, this.prepareArgs(arguments));\n};\n\n/**\n * Asynchronous file open.\n */\nFile.prototype.open = function() {\n  fs.open.apply(fs, this.prepareArgs(arguments));\n};\n\n/**\n * Synchronous open.\n */\nFile.prototype.openSync = function() {\n  return fs.openSync.apply(fs, this.prepareArgs(arguments));\n};\n\n/**\n * Asynchronous close.\n */\nFile.prototype.close = function() {\n  fs.close.apply(fs, Array.prototype.slice.call(arguments));\n};\n\n/**\n * Synchronous close.\n */\nFile.prototype.closeSync = function() {\n  return fs.closeSync.apply(fs, Array.prototype.slice.call(arguments));\n};\n\n/**\n * Asynchronous unlink.\n */\nFile.prototype.unlink = function() {\n  fs.unlink.apply(fs, this.prepareArgs(arguments));\n};\n\n/**\n * Synchronous unlink.\n */\nFile.prototype.unlinkSync = function() {\n  return fs.unlinkSync.apply(fs, this.prepareArgs(arguments));\n};\n\n/**\n * Exporting the lib.\n */\nmodule.exports = File;\n","/home/travis/build/npmtest/node-npmtest-temporary/node_modules/temporary/lib/generator.js":"/**\n * Temporary - The lord of tmp.\n *\n * Author: Veselin Todorov <hi@vesln.com>\n * Licensed under the MIT License.\n */\n\n/**\n * Dependencies.\n */\nvar fs = require('fs');\nvar path = require('path');\nvar detector = require('./detector');\nvar existsSync = fs.existsSync || path.existsSync;\n\n/**\n * Generator namespace.\n *\n * @type {Object}\n */\nvar generator = module.exports;\n\n/**\n * Generates random name.\n *\n * @returns {String}\n */\ngenerator.name = function() {\n  var id = null;\n  var tmp = detector.tmp();\n  do {\n    id = Date.now() + Math.random();\n  } while(existsSync(tmp + '/' + id));\n\n  return id + '';\n};\n\n/**\n * Buld a full name. (tmp dir + name).\n *\n * @param {String} name\n * @returns {String}\n */\ngenerator.build = function(name) {\n  var filename = detector.tmp();\n  if (name) filename += name + '.';\n  return filename + this.name();\n};\n","/home/travis/build/npmtest/node-npmtest-temporary/node_modules/temporary/lib/detector.js":"/**\n * Temporary - The lord of tmp.\n * \n * Author: Veselin Todorov <hi@vesln.com>\n * Licensed under the MIT License.\n */\n \n/**\n * Detection stolen from NPM (https://github.com/isaacs/npm/)\n * \n * Copyright 2009, 2010, 2011 Isaac Z. Schlueter (the \"Author\")\n * MIT License (https://github.com/isaacs/npm/blob/master/LICENSE)\n */ \n\n/**\n * Detector namespace.\n * \n * @type {Object}\n */\nvar detector = module.exports;\n\nvar normalize = function(path) {\n  var last = path[path.length - 1];\n  \n  if (detector.platform() !== \"win32\") {\n    if (last !== '/') {\n      path += '/';\n    }\n  } else {\n    //This is fine b/c Windows will \n    //correctly resolve filepaths with additional slashes\n    //and it is not correct to assume that on Windows the value\n    //of path will be a string that terminates in '\\'.\n    //\n    //See: http://stackoverflow.com/questions/4158597/extra-slashes-in-path-variable-of-file-copy-or-directory-createdirectory-met\n    //\n    path += '/';\n  }\n  \n  return path;\n}\n\n/**\n * Returns tmp dir. Thank you npm.\n * \n * @returns {String} tmp dir.\n */\ndetector.tmp = function() {\n  var temp = process.env.TMPDIR\n      || process.env.TMP\n      || process.env.TEMP\n      || (detector.platform() === \"win32\" ? \"c:\\\\windows\\\\temp\\\\\" : \"/tmp/\")\n  \n  return normalize(temp);\n};\n\n/**\n * Returns the platform. Allows Tests to verify all behaviors.\n *\n * @returns {String} platform.\n */\ndetector.platform = function() {\n  return process.platform;\n};\n\ndetector._normalize = normalize;\n","/home/travis/build/npmtest/node-npmtest-temporary/node_modules/temporary/lib/base.js":"/**\n * Temporary - The lord of tmp.\n *\n * Author: Veselin Todorov <hi@vesln.com>\n * Licensed under the MIT License.\n */\n\n/**\n * Dependencies.\n */\nvar fs = require('fs');\nvar path = require('path');\nvar generator = require('./generator');\nvar detector = require('./detector');\n\n/**\n * Base constructor.\n *\n * @param {String|null} name\n */\nfunction Base(name) {\n  this.init(name);\n};\n\n/**\n * Initializes the class.\n *\n * @param {String|null} name\n */\nBase.prototype.init = function(name) {\n  var filename = generator.build(name);\n  this.create(filename);\n  this.path = filename;\n};\n\n/**\n * Converts the arguments object to array and\n * append `this.path` as first element.\n *\n * @returns {Array}\n */\nBase.prototype.prepareArgs = function(args) {\n  args = Array.prototype.slice.call(args);\n  args.unshift(this.path);\n  return args;\n};\n\n/**\n * Renames the dir/file.\n *\n * @param {String} name\n * @param {Function} cb Callback.\n */\nBase.prototype.rename = function(name, cb) {\n  var self = this;\n  var args = arguments;\n  var tmp = path.normalize(path.dirname(self.path) + '/' + name);\n\n  fs.rename(this.path, tmp, function(err) {\n    self.path = tmp;\n    if (args.length === 2) cb(err);\n  });\n};\n\n/**\n * Renames the dir/file sync.\n *\n * @param {String} name\n */\nBase.prototype.renameSync = function(name) {\n  var tmp = path.normalize(path.dirname(this.path) + '/' + name);\n  var result = fs.renameSync(this.path, tmp);\n  this.path = tmp;\n  return result;\n};\n\n/**\n * Exporting the lib.\n */\nmodule.exports = Base;\n","/home/travis/build/npmtest/node-npmtest-temporary/node_modules/temporary/lib/dir.js":"/**\n * Temporary - The lord of tmp.\n *\n * Author: Veselin Todorov <hi@vesln.com>\n * Licensed under the MIT License.\n */\n\n/**\n * Dependencies.\n */\nvar fs = require('fs');\nvar path = require('path');\nvar generator = require('./generator');\nvar detector = require('./detector');\nvar Base = require('./base');\n\n/**\n * Dir constructor.\n *\n * @param {String|null} name\n */\nfunction Dir(name) {\n  this.init(name);\n};\n\n/**\n * Dir extends from tmp.\n */\nDir.prototype.__proto__ = Base.prototype;\n\n/**\n * Creates new file.\n *\n * @param {String} dirname\n */\nDir.prototype.create = function(dirname) {\n  return fs.mkdirSync(path.normalize(dirname), 0777);\n};\n\n/**\n * Asynchronous dir.\n */\nDir.prototype.rmdir = function() {\n  fs.rmdir.apply(fs, this.prepareArgs(arguments));\n};\n\n/**\n * Synchronous rmdir.\n */\nDir.prototype.rmdirSync = function() {\n  return fs.rmdirSync.apply(fs, this.prepareArgs(arguments));\n};\n\n/**\n * Exporting the lib.\n */\nmodule.exports = Dir;\n"}